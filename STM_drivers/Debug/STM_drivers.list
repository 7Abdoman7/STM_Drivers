
STM_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000428  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000558  08000560  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000558  08000558  00010560  2**0
                  CONTENTS
  4 .ARM          00000000  08000558  08000558  00010560  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000558  08000560  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000558  08000558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000560  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000560  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b2e  00000000  00000000  00010589  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002b5  00000000  00000000  000110b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00011370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  00011418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000c40  00000000  00000000  00011488  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000398  00000000  00000000  000120c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000038d8  00000000  00000000  00012460  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000164  00000000  00000000  00015db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000540 	.word	0x08000540

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000540 	.word	0x08000540

08000170 <MCAL_GPIO_voidInit>:
 *      Author: Abdo
 */

#include "GPIO_Interface.h"

void MCAL_GPIO_voidInit(GPIO_Config_t * config) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	GPIO_RegDef_t* gpioTemp;

	switch (config->port) {
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d006      	beq.n	800018e <MCAL_GPIO_voidInit+0x1e>
 8000180:	2b02      	cmp	r3, #2
 8000182:	d007      	beq.n	8000194 <MCAL_GPIO_voidInit+0x24>
 8000184:	2b00      	cmp	r3, #0
 8000186:	d108      	bne.n	800019a <MCAL_GPIO_voidInit+0x2a>
		case (PORTA):
			gpioTemp = GPIOA;
 8000188:	4b7c      	ldr	r3, [pc, #496]	; (800037c <MCAL_GPIO_voidInit+0x20c>)
 800018a:	60fb      	str	r3, [r7, #12]
		break;
 800018c:	e005      	b.n	800019a <MCAL_GPIO_voidInit+0x2a>
		case (PORTB):
			gpioTemp = GPIOB;
 800018e:	4b7c      	ldr	r3, [pc, #496]	; (8000380 <MCAL_GPIO_voidInit+0x210>)
 8000190:	60fb      	str	r3, [r7, #12]
		break;
 8000192:	e002      	b.n	800019a <MCAL_GPIO_voidInit+0x2a>
		case (PORTC):
			gpioTemp = GPIOC;
 8000194:	4b7a      	ldr	r3, [pc, #488]	; (8000380 <MCAL_GPIO_voidInit+0x210>)
 8000196:	60fb      	str	r3, [r7, #12]
		break;
 8000198:	bf00      	nop
	}

	if (8 > config->pinNumber) {
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	785b      	ldrb	r3, [r3, #1]
 800019e:	2b07      	cmp	r3, #7
 80001a0:	d871      	bhi.n	8000286 <MCAL_GPIO_voidInit+0x116>
		if (config->mode == GPIO_MODE_INPUT_FLOATING
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	789b      	ldrb	r3, [r3, #2]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d00b      	beq.n	80001c2 <MCAL_GPIO_voidInit+0x52>
				|| config->mode == GPIO_MODE_INPUT_PULLUP
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	789b      	ldrb	r3, [r3, #2]
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	d007      	beq.n	80001c2 <MCAL_GPIO_voidInit+0x52>
				|| config->mode == GPIO_MODE_INPUT_PULLDOWN
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	789b      	ldrb	r3, [r3, #2]
 80001b6:	2b02      	cmp	r3, #2
 80001b8:	d003      	beq.n	80001c2 <MCAL_GPIO_voidInit+0x52>
				|| config->mode == GPIO_MODE_INPUT_ANALOG) {
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	789b      	ldrb	r3, [r3, #2]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d12a      	bne.n	8000218 <MCAL_GPIO_voidInit+0xa8>
			gpioTemp->CRL &= ~(0b11 << GPIO_CRL_SHIFT * config->pinNumber);
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	7852      	ldrb	r2, [r2, #1]
 80001ca:	0092      	lsls	r2, r2, #2
 80001cc:	2103      	movs	r1, #3
 80001ce:	fa01 f202 	lsl.w	r2, r1, r2
 80001d2:	43d2      	mvns	r2, r2
 80001d4:	401a      	ands	r2, r3
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	601a      	str	r2, [r3, #0]
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	789b      	ldrb	r3, [r3, #2]
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d10b      	bne.n	80001fa <MCAL_GPIO_voidInit+0x8a>
				CLR_BIT(gpioTemp->ODR, config->pinNumber);
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	68db      	ldr	r3, [r3, #12]
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	7852      	ldrb	r2, [r2, #1]
 80001ea:	4611      	mov	r1, r2
 80001ec:	2201      	movs	r2, #1
 80001ee:	408a      	lsls	r2, r1
 80001f0:	43d2      	mvns	r2, r2
 80001f2:	401a      	ands	r2, r3
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	60da      	str	r2, [r3, #12]
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 80001f8:	e028      	b.n	800024c <MCAL_GPIO_voidInit+0xdc>
			}
			else if (config->mode == GPIO_MODE_INPUT_PULLUP) {
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	789b      	ldrb	r3, [r3, #2]
 80001fe:	2b02      	cmp	r3, #2
 8000200:	d124      	bne.n	800024c <MCAL_GPIO_voidInit+0xdc>
				SET_BIT(gpioTemp->ODR, config->pinNumber);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	687a      	ldr	r2, [r7, #4]
 8000208:	7852      	ldrb	r2, [r2, #1]
 800020a:	4611      	mov	r1, r2
 800020c:	2201      	movs	r2, #1
 800020e:	408a      	lsls	r2, r1
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	60da      	str	r2, [r3, #12]
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 8000216:	e019      	b.n	800024c <MCAL_GPIO_voidInit+0xdc>
			}
		}
		else {
			gpioTemp->CRL &= ~(0b11 << GPIO_CRL_SHIFT * config->pinNumber);
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	7852      	ldrb	r2, [r2, #1]
 8000220:	0092      	lsls	r2, r2, #2
 8000222:	2103      	movs	r1, #3
 8000224:	fa01 f202 	lsl.w	r2, r1, r2
 8000228:	43d2      	mvns	r2, r2
 800022a:	401a      	ands	r2, r3
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	601a      	str	r2, [r3, #0]
			gpioTemp->CRL |= (config->speed << GPIO_CRL_SHIFT * config->pinNumber);
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	78d2      	ldrb	r2, [r2, #3]
 8000238:	4611      	mov	r1, r2
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	7852      	ldrb	r2, [r2, #1]
 800023e:	0092      	lsls	r2, r2, #2
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	431a      	orrs	r2, r3
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	e000      	b.n	800024e <MCAL_GPIO_voidInit+0xde>
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 800024c:	bf00      	nop
		}
		gpioTemp->CRL &= ~(0b11 << ((GPIO_CRL_SHIFT * config->pinNumber) + 2));
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	7852      	ldrb	r2, [r2, #1]
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	3202      	adds	r2, #2
 800025a:	2103      	movs	r1, #3
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	401a      	ands	r2, r3
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	601a      	str	r2, [r3, #0]
		gpioTemp->CRL |= (config->mode << ((GPIO_CRL_SHIFT * config->pinNumber) + 2));
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	7892      	ldrb	r2, [r2, #2]
 8000270:	4611      	mov	r1, r2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	7852      	ldrb	r2, [r2, #1]
 8000276:	0092      	lsls	r2, r2, #2
 8000278:	3202      	adds	r2, #2
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	431a      	orrs	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]
			gpioTemp->CRH |= (config->speed << GPIO_CRL_SHIFT * (config->pinNumber - 8));
		}
		gpioTemp->CRH &= ~(0b11 << ((GPIO_CRL_SHIFT * (config->pinNumber - 8)) + 2));
		gpioTemp->CRH |= (config->mode << ((GPIO_CRL_SHIFT * (config->pinNumber - 8)) + 2));
	}
}
 8000284:	e074      	b.n	8000370 <MCAL_GPIO_voidInit+0x200>
		if (config->mode == GPIO_MODE_INPUT_FLOATING
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d00b      	beq.n	80002a6 <MCAL_GPIO_voidInit+0x136>
				|| config->mode == GPIO_MODE_INPUT_PULLUP
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	789b      	ldrb	r3, [r3, #2]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d007      	beq.n	80002a6 <MCAL_GPIO_voidInit+0x136>
				|| config->mode == GPIO_MODE_INPUT_PULLDOWN
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	789b      	ldrb	r3, [r3, #2]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d003      	beq.n	80002a6 <MCAL_GPIO_voidInit+0x136>
				|| config->mode == GPIO_MODE_INPUT_ANALOG) {
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	789b      	ldrb	r3, [r3, #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d12a      	bne.n	80002fc <MCAL_GPIO_voidInit+0x18c>
			gpioTemp->CRH &= ~(0b11 << GPIO_CRL_SHIFT * config->pinNumber);
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	7852      	ldrb	r2, [r2, #1]
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	2103      	movs	r1, #3
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	43d2      	mvns	r2, r2
 80002b8:	401a      	ands	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	605a      	str	r2, [r3, #4]
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	789b      	ldrb	r3, [r3, #2]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d10b      	bne.n	80002de <MCAL_GPIO_voidInit+0x16e>
				CLR_BIT(gpioTemp->ODR, config->pinNumber);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	7852      	ldrb	r2, [r2, #1]
 80002ce:	4611      	mov	r1, r2
 80002d0:	2201      	movs	r2, #1
 80002d2:	408a      	lsls	r2, r1
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	401a      	ands	r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	60da      	str	r2, [r3, #12]
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 80002dc:	e02a      	b.n	8000334 <MCAL_GPIO_voidInit+0x1c4>
			else if (config->mode == GPIO_MODE_INPUT_PULLUP) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	d126      	bne.n	8000334 <MCAL_GPIO_voidInit+0x1c4>
				SET_BIT(gpioTemp->ODR, config->pinNumber);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	7852      	ldrb	r2, [r2, #1]
 80002ee:	4611      	mov	r1, r2
 80002f0:	2201      	movs	r2, #1
 80002f2:	408a      	lsls	r2, r1
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 80002fa:	e01b      	b.n	8000334 <MCAL_GPIO_voidInit+0x1c4>
			gpioTemp->CRH &= ~(0b11 << GPIO_CRL_SHIFT * (config->pinNumber - 8));
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	7852      	ldrb	r2, [r2, #1]
 8000304:	3a08      	subs	r2, #8
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	2103      	movs	r1, #3
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	43d2      	mvns	r2, r2
 8000310:	401a      	ands	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	605a      	str	r2, [r3, #4]
			gpioTemp->CRH |= (config->speed << GPIO_CRL_SHIFT * (config->pinNumber - 8));
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	78d2      	ldrb	r2, [r2, #3]
 800031e:	4611      	mov	r1, r2
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	7852      	ldrb	r2, [r2, #1]
 8000324:	3a08      	subs	r2, #8
 8000326:	0092      	lsls	r2, r2, #2
 8000328:	fa01 f202 	lsl.w	r2, r1, r2
 800032c:	431a      	orrs	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	e000      	b.n	8000336 <MCAL_GPIO_voidInit+0x1c6>
			if (config->mode == GPIO_MODE_INPUT_PULLDOWN) {
 8000334:	bf00      	nop
		gpioTemp->CRH &= ~(0b11 << ((GPIO_CRL_SHIFT * (config->pinNumber - 8)) + 2));
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7852      	ldrb	r2, [r2, #1]
 800033e:	3a08      	subs	r2, #8
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	3202      	adds	r2, #2
 8000344:	2103      	movs	r1, #3
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	43d2      	mvns	r2, r2
 800034c:	401a      	ands	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	605a      	str	r2, [r3, #4]
		gpioTemp->CRH |= (config->mode << ((GPIO_CRL_SHIFT * (config->pinNumber - 8)) + 2));
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	7892      	ldrb	r2, [r2, #2]
 800035a:	4611      	mov	r1, r2
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	7852      	ldrb	r2, [r2, #1]
 8000360:	3a08      	subs	r2, #8
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	3202      	adds	r2, #2
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	431a      	orrs	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	605a      	str	r2, [r3, #4]
}
 8000370:	bf00      	nop
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40010800 	.word	0x40010800
 8000380:	40010c00 	.word	0x40010c00

08000384 <MCAL_GPIO_voidWritePin>:

GPIO_Pin_State_t MCAL_GPIO_voidReadPin(GPIO_RegDef_t* GPIOx, u8 pinNumber) {
    return ((GPIOx->IDR >> pinNumber) & 0x01);
}

void MCAL_GPIO_voidWritePin(GPIO_RegDef_t* GPIOx, u8 pinNumber, u8 value) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
 8000390:	4613      	mov	r3, r2
 8000392:	70bb      	strb	r3, [r7, #2]
    if (value == GPIO_PIN_SET) {
 8000394:	78bb      	ldrb	r3, [r7, #2]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d109      	bne.n	80003ae <MCAL_GPIO_voidWritePin+0x2a>
        GPIOx->BSRR |= (1 << pinNumber);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	78fa      	ldrb	r2, [r7, #3]
 80003a0:	2101      	movs	r1, #1
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
 80003a6:	431a      	orrs	r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	611a      	str	r2, [r3, #16]
    }
    else {
        GPIOx->BRR |= (1 << pinNumber);
    }
}
 80003ac:	e008      	b.n	80003c0 <MCAL_GPIO_voidWritePin+0x3c>
        GPIOx->BRR |= (1 << pinNumber);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	78fa      	ldrb	r2, [r7, #3]
 80003b4:	2101      	movs	r1, #1
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	431a      	orrs	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	615a      	str	r2, [r3, #20]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
	...

080003cc <MCAL_RCC_voidEnablePeripheral>:
	RCC->CFGR |= (AHB_PRESCALE  << RCC_CFGR_HPRE_SHIFT);
	RCC->CFGR |= (APB1_PRESCALE << RCC_CFGR_PPRE1_SHIFT);
	RCC->CFGR |= (APB2_PRESCALE << RCC_CFGR_PPRE2_SHIFT);
}

void MCAL_RCC_voidEnablePeripheral(const RCC_PeripheralId_t peripheralId) {
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    u8 u8BusId = peripheralId >> 16;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	0c1b      	lsrs	r3, r3, #16
 80003d8:	73fb      	strb	r3, [r7, #15]

    switch (u8BusId) {
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d00f      	beq.n	8000400 <MCAL_RCC_voidEnablePeripheral+0x34>
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d018      	beq.n	8000416 <MCAL_RCC_voidEnablePeripheral+0x4a>
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d000      	beq.n	80003ea <MCAL_RCC_voidEnablePeripheral+0x1e>
        break;
        case (RCC_APB2_ID):
            SET_BIT(RCC->APB2ENR, peripheralId & 0xFFFF);
        break;
        default:
        break;
 80003e8:	e020      	b.n	800042c <MCAL_RCC_voidEnablePeripheral+0x60>
            SET_BIT(RCC->AHBENR, peripheralId & 0xFFFF);
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MCAL_RCC_voidEnablePeripheral+0x6c>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	2101      	movs	r1, #1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	490f      	ldr	r1, [pc, #60]	; (8000438 <MCAL_RCC_voidEnablePeripheral+0x6c>)
 80003fa:	4313      	orrs	r3, r2
 80003fc:	614b      	str	r3, [r1, #20]
        break;
 80003fe:	e015      	b.n	800042c <MCAL_RCC_voidEnablePeripheral+0x60>
            SET_BIT(RCC->APB1ENR, peripheralId & 0xFFFF);
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <MCAL_RCC_voidEnablePeripheral+0x6c>)
 8000402:	69da      	ldr	r2, [r3, #28]
 8000404:	2101      	movs	r1, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	b29b      	uxth	r3, r3
 800040e:	490a      	ldr	r1, [pc, #40]	; (8000438 <MCAL_RCC_voidEnablePeripheral+0x6c>)
 8000410:	4313      	orrs	r3, r2
 8000412:	61cb      	str	r3, [r1, #28]
        break;
 8000414:	e00a      	b.n	800042c <MCAL_RCC_voidEnablePeripheral+0x60>
            SET_BIT(RCC->APB2ENR, peripheralId & 0xFFFF);
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MCAL_RCC_voidEnablePeripheral+0x6c>)
 8000418:	699a      	ldr	r2, [r3, #24]
 800041a:	2101      	movs	r1, #1
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	b29b      	uxth	r3, r3
 8000424:	4904      	ldr	r1, [pc, #16]	; (8000438 <MCAL_RCC_voidEnablePeripheral+0x6c>)
 8000426:	4313      	orrs	r3, r2
 8000428:	618b      	str	r3, [r1, #24]
        break;
 800042a:	bf00      	nop
    }
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <main>:

#include "../MCAL/RCC/RCC_Interface.h"
#include "../MCAL/GPIO/GPIO_Interface.h"


int main(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	//MCAL_RCC_voidInit();
	MCAL_RCC_voidEnablePeripheral(RCC_APB2_GPIOA);
 8000442:	4814      	ldr	r0, [pc, #80]	; (8000494 <main+0x58>)
 8000444:	f7ff ffc2 	bl	80003cc <MCAL_RCC_voidEnablePeripheral>
	MCAL_RCC_voidEnablePeripheral(RCC_APB2_GPIOC);
 8000448:	4813      	ldr	r0, [pc, #76]	; (8000498 <main+0x5c>)
 800044a:	f7ff ffbf 	bl	80003cc <MCAL_RCC_voidEnablePeripheral>

	GPIO_Config_t GPIO_Config;
	GPIO_Config_t led;

	GPIO_Config.port = PORTA;
 800044e:	2300      	movs	r3, #0
 8000450:	713b      	strb	r3, [r7, #4]
	GPIO_Config.pinNumber = 5;
 8000452:	2305      	movs	r3, #5
 8000454:	717b      	strb	r3, [r7, #5]
    GPIO_Config.mode = GPIO_MODE_OUTPUT_PUSHPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	71bb      	strb	r3, [r7, #6]
    GPIO_Config.speed = GPIO_SPEED_2MHZ;
 800045a:	2302      	movs	r3, #2
 800045c:	71fb      	strb	r3, [r7, #7]
    MCAL_GPIO_voidInit(&GPIO_Config);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe85 	bl	8000170 <MCAL_GPIO_voidInit>

    MCAL_GPIO_voidWritePin(GPIOA, 5, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	2105      	movs	r1, #5
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <main+0x60>)
 800046c:	f7ff ff8a 	bl	8000384 <MCAL_GPIO_voidWritePin>

	led.port = PORTC;
 8000470:	2302      	movs	r3, #2
 8000472:	703b      	strb	r3, [r7, #0]
	led.pinNumber = 13;
 8000474:	230d      	movs	r3, #13
 8000476:	707b      	strb	r3, [r7, #1]
    led.mode = GPIO_MODE_OUTPUT_PUSHPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	70bb      	strb	r3, [r7, #2]
    led.speed = GPIO_SPEED_2MHZ;
 800047c:	2302      	movs	r3, #2
 800047e:	70fb      	strb	r3, [r7, #3]
    MCAL_GPIO_voidInit(&led);
 8000480:	463b      	mov	r3, r7
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe74 	bl	8000170 <MCAL_GPIO_voidInit>

    MCAL_GPIO_voidWritePin(GPIOC, 13, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	210d      	movs	r1, #13
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <main+0x64>)
 800048e:	f7ff ff79 	bl	8000384 <MCAL_GPIO_voidWritePin>

    while (1) {}
 8000492:	e7fe      	b.n	8000492 <main+0x56>
 8000494:	00030002 	.word	0x00030002
 8000498:	00030004 	.word	0x00030004
 800049c:	40010800 	.word	0x40010800
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004aa:	490e      	ldr	r1, [pc, #56]	; (80004e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <LoopForever+0xe>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b0:	e002      	b.n	80004b8 <LoopCopyDataInit>

080004b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b6:	3304      	adds	r3, #4

080004b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004bc:	d3f9      	bcc.n	80004b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c0:	4c0b      	ldr	r4, [pc, #44]	; (80004f0 <LoopForever+0x16>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c4:	e001      	b.n	80004ca <LoopFillZerobss>

080004c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c8:	3204      	adds	r2, #4

080004ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004cc:	d3fb      	bcc.n	80004c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80004d2:	f000 f811 	bl	80004f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d6:	f7ff ffb1 	bl	800043c <main>

080004da <LoopForever>:

LoopForever:
    b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   r0, =_estack
 80004dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004e8:	08000560 	.word	0x08000560
  ldr r2, =_sbss
 80004ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f0:	2000001c 	.word	0x2000001c

080004f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC1_2_IRQHandler>
	...

080004f8 <__libc_init_array>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	2500      	movs	r5, #0
 80004fc:	4e0c      	ldr	r6, [pc, #48]	; (8000530 <__libc_init_array+0x38>)
 80004fe:	4c0d      	ldr	r4, [pc, #52]	; (8000534 <__libc_init_array+0x3c>)
 8000500:	1ba4      	subs	r4, r4, r6
 8000502:	10a4      	asrs	r4, r4, #2
 8000504:	42a5      	cmp	r5, r4
 8000506:	d109      	bne.n	800051c <__libc_init_array+0x24>
 8000508:	f000 f81a 	bl	8000540 <_init>
 800050c:	2500      	movs	r5, #0
 800050e:	4e0a      	ldr	r6, [pc, #40]	; (8000538 <__libc_init_array+0x40>)
 8000510:	4c0a      	ldr	r4, [pc, #40]	; (800053c <__libc_init_array+0x44>)
 8000512:	1ba4      	subs	r4, r4, r6
 8000514:	10a4      	asrs	r4, r4, #2
 8000516:	42a5      	cmp	r5, r4
 8000518:	d105      	bne.n	8000526 <__libc_init_array+0x2e>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000520:	4798      	blx	r3
 8000522:	3501      	adds	r5, #1
 8000524:	e7ee      	b.n	8000504 <__libc_init_array+0xc>
 8000526:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800052a:	4798      	blx	r3
 800052c:	3501      	adds	r5, #1
 800052e:	e7f2      	b.n	8000516 <__libc_init_array+0x1e>
 8000530:	08000558 	.word	0x08000558
 8000534:	08000558 	.word	0x08000558
 8000538:	08000558 	.word	0x08000558
 800053c:	0800055c 	.word	0x0800055c

08000540 <_init>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr

0800054c <_fini>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr
